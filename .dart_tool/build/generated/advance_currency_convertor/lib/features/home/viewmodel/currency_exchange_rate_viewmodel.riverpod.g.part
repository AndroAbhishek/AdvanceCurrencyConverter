// **************************************************************************
// RiverpodGenerator
// **************************************************************************

String _$currencyExchangeRateViewmodelHash() =>
    r'46a1092f89cb8d0aa0b535c1004d9ae64a8345a6';

/// Copied from Dart SDK
class _SystemHash {
  _SystemHash._();

  static int combine(int hash, int value) {
    // ignore: parameter_assignments
    hash = 0x1fffffff & (hash + value);
    // ignore: parameter_assignments
    hash = 0x1fffffff & (hash + ((0x0007ffff & hash) << 10));
    return hash ^ (hash >> 6);
  }

  static int finish(int hash) {
    // ignore: parameter_assignments
    hash = 0x1fffffff & (hash + ((0x03ffffff & hash) << 3));
    // ignore: parameter_assignments
    hash = hash ^ (hash >> 11);
    return 0x1fffffff & (hash + ((0x00003fff & hash) << 15));
  }
}

abstract class _$CurrencyExchangeRateViewmodel
    extends BuildlessAsyncNotifier<CurrencyRateModel> {
  late final String base;
  late final List<String> symbols;

  FutureOr<CurrencyRateModel> build({
    required String base,
    required List<String> symbols,
  });
}

/// See also [CurrencyExchangeRateViewmodel].
@ProviderFor(CurrencyExchangeRateViewmodel)
const currencyExchangeRateViewmodelProvider =
    CurrencyExchangeRateViewmodelFamily();

/// See also [CurrencyExchangeRateViewmodel].
class CurrencyExchangeRateViewmodelFamily
    extends Family<AsyncValue<CurrencyRateModel>> {
  /// See also [CurrencyExchangeRateViewmodel].
  const CurrencyExchangeRateViewmodelFamily();

  /// See also [CurrencyExchangeRateViewmodel].
  CurrencyExchangeRateViewmodelProvider call({
    required String base,
    required List<String> symbols,
  }) {
    return CurrencyExchangeRateViewmodelProvider(
      base: base,
      symbols: symbols,
    );
  }

  @override
  CurrencyExchangeRateViewmodelProvider getProviderOverride(
    covariant CurrencyExchangeRateViewmodelProvider provider,
  ) {
    return call(
      base: provider.base,
      symbols: provider.symbols,
    );
  }

  static const Iterable<ProviderOrFamily>? _dependencies = null;

  @override
  Iterable<ProviderOrFamily>? get dependencies => _dependencies;

  static const Iterable<ProviderOrFamily>? _allTransitiveDependencies = null;

  @override
  Iterable<ProviderOrFamily>? get allTransitiveDependencies =>
      _allTransitiveDependencies;

  @override
  String? get name => r'currencyExchangeRateViewmodelProvider';
}

/// See also [CurrencyExchangeRateViewmodel].
class CurrencyExchangeRateViewmodelProvider extends AsyncNotifierProviderImpl<
    CurrencyExchangeRateViewmodel, CurrencyRateModel> {
  /// See also [CurrencyExchangeRateViewmodel].
  CurrencyExchangeRateViewmodelProvider({
    required String base,
    required List<String> symbols,
  }) : this._internal(
          () => CurrencyExchangeRateViewmodel()
            ..base = base
            ..symbols = symbols,
          from: currencyExchangeRateViewmodelProvider,
          name: r'currencyExchangeRateViewmodelProvider',
          debugGetCreateSourceHash:
              const bool.fromEnvironment('dart.vm.product')
                  ? null
                  : _$currencyExchangeRateViewmodelHash,
          dependencies: CurrencyExchangeRateViewmodelFamily._dependencies,
          allTransitiveDependencies:
              CurrencyExchangeRateViewmodelFamily._allTransitiveDependencies,
          base: base,
          symbols: symbols,
        );

  CurrencyExchangeRateViewmodelProvider._internal(
    super._createNotifier, {
    required super.name,
    required super.dependencies,
    required super.allTransitiveDependencies,
    required super.debugGetCreateSourceHash,
    required super.from,
    required this.base,
    required this.symbols,
  }) : super.internal();

  final String base;
  final List<String> symbols;

  @override
  FutureOr<CurrencyRateModel> runNotifierBuild(
    covariant CurrencyExchangeRateViewmodel notifier,
  ) {
    return notifier.build(
      base: base,
      symbols: symbols,
    );
  }

  @override
  Override overrideWith(CurrencyExchangeRateViewmodel Function() create) {
    return ProviderOverride(
      origin: this,
      override: CurrencyExchangeRateViewmodelProvider._internal(
        () => create()
          ..base = base
          ..symbols = symbols,
        from: from,
        name: null,
        dependencies: null,
        allTransitiveDependencies: null,
        debugGetCreateSourceHash: null,
        base: base,
        symbols: symbols,
      ),
    );
  }

  @override
  AsyncNotifierProviderElement<CurrencyExchangeRateViewmodel, CurrencyRateModel>
      createElement() {
    return _CurrencyExchangeRateViewmodelProviderElement(this);
  }

  @override
  bool operator ==(Object other) {
    return other is CurrencyExchangeRateViewmodelProvider &&
        other.base == base &&
        other.symbols == symbols;
  }

  @override
  int get hashCode {
    var hash = _SystemHash.combine(0, runtimeType.hashCode);
    hash = _SystemHash.combine(hash, base.hashCode);
    hash = _SystemHash.combine(hash, symbols.hashCode);

    return _SystemHash.finish(hash);
  }
}

@Deprecated('Will be removed in 3.0. Use Ref instead')
// ignore: unused_element
mixin CurrencyExchangeRateViewmodelRef
    on AsyncNotifierProviderRef<CurrencyRateModel> {
  /// The parameter `base` of this provider.
  String get base;

  /// The parameter `symbols` of this provider.
  List<String> get symbols;
}

class _CurrencyExchangeRateViewmodelProviderElement
    extends AsyncNotifierProviderElement<CurrencyExchangeRateViewmodel,
        CurrencyRateModel> with CurrencyExchangeRateViewmodelRef {
  _CurrencyExchangeRateViewmodelProviderElement(super.provider);

  @override
  String get base => (origin as CurrencyExchangeRateViewmodelProvider).base;
  @override
  List<String> get symbols =>
      (origin as CurrencyExchangeRateViewmodelProvider).symbols;
}
// ignore_for_file: type=lint
// ignore_for_file: subtype_of_sealed_class, invalid_use_of_internal_member, invalid_use_of_visible_for_testing_member, deprecated_member_use_from_same_package
