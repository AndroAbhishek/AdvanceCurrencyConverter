// Mocks generated by Mockito 5.4.5 from annotations
// in advance_currency_convertor/test/currency/currency_repo_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:advance_currency_convertor/core/failure/app_failure.dart'
    as _i5;
import 'package:advance_currency_convertor/features/currency/db/currency_db_service.dart'
    as _i7;
import 'package:advance_currency_convertor/features/currency/db/entities/currency_rate_entity.dart'
    as _i8;
import 'package:advance_currency_convertor/features/currency/model/currency_rate_model.dart'
    as _i6;
import 'package:advance_currency_convertor/features/currency/repositories/currency_api_service.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CurrencyApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrencyApiService extends _i1.Mock
    implements _i3.CurrencyApiService {
  MockCurrencyApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<
      _i2.Either<_i5.AppFailure, _i6.CurrencyRateModel>> getExchangeRates({
    required String? base,
    required List<String>? symbols,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExchangeRates,
          [],
          {
            #base: base,
            #symbols: symbols,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.AppFailure, _i6.CurrencyRateModel>>.value(
                _FakeEither_0<_i5.AppFailure, _i6.CurrencyRateModel>(
          this,
          Invocation.method(
            #getExchangeRates,
            [],
            {
              #base: base,
              #symbols: symbols,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AppFailure, _i6.CurrencyRateModel>>);
}

/// A class which mocks [CurrencyDBService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrencyDBService extends _i1.Mock implements _i7.CurrencyDBService {
  MockCurrencyDBService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> cacheCurrencyRates(_i6.CurrencyRateModel? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheCurrencyRates,
          [data],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i8.CurrencyRateEntity>> getRatesByBase(String? base) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRatesByBase,
          [base],
        ),
        returnValue: _i4.Future<List<_i8.CurrencyRateEntity>>.value(
            <_i8.CurrencyRateEntity>[]),
      ) as _i4.Future<List<_i8.CurrencyRateEntity>>);
}
