// Mocks generated by Mockito 5.4.5 from annotations
// in advance_currency_convertor/test/currency/currency_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:advance_currency_convertor/core/database/app_database.dart'
    as _i7;
import 'package:advance_currency_convertor/core/failure/app_failure.dart'
    as _i10;
import 'package:advance_currency_convertor/features/currency/db/dao/currency_rate_dao.dart'
    as _i3;
import 'package:advance_currency_convertor/features/currency/db/entities/currency_rate_entity.dart'
    as _i8;
import 'package:advance_currency_convertor/features/currency/model/currency_rate_model.dart'
    as _i11;
import 'package:advance_currency_convertor/features/currency/repositories/currency_repository.dart'
    as _i9;
import 'package:advance_currency_convertor/features/currency_list/db/dao/currency_dao.dart'
    as _i2;
import 'package:dartz/dartz.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCurrencyDao_0 extends _i1.SmartFake implements _i2.CurrencyDao {
  _FakeCurrencyDao_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCurrencyRateDao_1 extends _i1.SmartFake
    implements _i3.CurrencyRateDao {
  _FakeCurrencyRateDao_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_2<T> extends _i1.SmartFake
    implements _i4.StreamController<T> {
  _FakeStreamController_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseExecutor_3 extends _i1.SmartFake
    implements _i5.DatabaseExecutor {
  _FakeDatabaseExecutor_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_4<L, R> extends _i1.SmartFake implements _i6.Either<L, R> {
  _FakeEither_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i7.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CurrencyDao get currencyDao => (super.noSuchMethod(
        Invocation.getter(#currencyDao),
        returnValue: _FakeCurrencyDao_0(
          this,
          Invocation.getter(#currencyDao),
        ),
      ) as _i2.CurrencyDao);

  @override
  _i3.CurrencyRateDao get currencyRateDao => (super.noSuchMethod(
        Invocation.getter(#currencyRateDao),
        returnValue: _FakeCurrencyRateDao_1(
          this,
          Invocation.getter(#currencyRateDao),
        ),
      ) as _i3.CurrencyRateDao);

  @override
  _i4.StreamController<String> get changeListener => (super.noSuchMethod(
        Invocation.getter(#changeListener),
        returnValue: _FakeStreamController_2<String>(
          this,
          Invocation.getter(#changeListener),
        ),
      ) as _i4.StreamController<String>);

  @override
  set changeListener(_i4.StreamController<String>? _changeListener) =>
      super.noSuchMethod(
        Invocation.setter(
          #changeListener,
          _changeListener,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.DatabaseExecutor get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseExecutor_3(
          this,
          Invocation.getter(#database),
        ),
      ) as _i5.DatabaseExecutor);

  @override
  set database(_i5.DatabaseExecutor? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [CurrencyRateDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrencyRateDao extends _i1.Mock implements _i3.CurrencyRateDao {
  MockCurrencyRateDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> insertRates(List<_i8.CurrencyRateEntity>? rates) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertRates,
          [rates],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i8.CurrencyRateEntity>> getRatesByBase(String? base) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRatesByBase,
          [base],
        ),
        returnValue: _i4.Future<List<_i8.CurrencyRateEntity>>.value(
            <_i8.CurrencyRateEntity>[]),
      ) as _i4.Future<List<_i8.CurrencyRateEntity>>);

  @override
  _i4.Future<void> deleteRatesByBase(String? base) => (super.noSuchMethod(
        Invocation.method(
          #deleteRatesByBase,
          [base],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [CurrencyRateRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrencyRateRepository extends _i1.Mock
    implements _i9.CurrencyRateRepository {
  MockCurrencyRateRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.Either<_i10.AppFailure, _i11.CurrencyRateModel>>
      getExchangeRates({
    required String? base,
    required List<String>? symbols,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #getExchangeRates,
              [],
              {
                #base: base,
                #symbols: symbols,
              },
            ),
            returnValue: _i4.Future<
                    _i6.Either<_i10.AppFailure, _i11.CurrencyRateModel>>.value(
                _FakeEither_4<_i10.AppFailure, _i11.CurrencyRateModel>(
              this,
              Invocation.method(
                #getExchangeRates,
                [],
                {
                  #base: base,
                  #symbols: symbols,
                },
              ),
            )),
          ) as _i4.Future<_i6.Either<_i10.AppFailure, _i11.CurrencyRateModel>>);
}
